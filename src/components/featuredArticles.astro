---
import SiteGridContent from '../components/siteGridContent.astro'
import getFName from '../../content/getFName'
import sanitizeMD from '../lib/sanitizeMD'
import type { Post } from '../lib/types'

// Helper function to extract clean site URL
function getCleanSiteUrl(siteUrl: string | URL | undefined): string {
    const defaultUrl = 'https://adarshrkumar.dev'
    let cleanUrl = siteUrl?.toString() || defaultUrl
    
    if (cleanUrl.includes('://')) {
        cleanUrl = cleanUrl.split('://')[1]
    }
    if (cleanUrl.endsWith('/')) {
        cleanUrl = cleanUrl.slice(0, -1)
    }
    
    return cleanUrl
}

// Helper function to filter featured posts by slug
function getFeaturedPosts(allPosts: Post[], featuredSlugs: string[]): Post[] {
    const featuredPosts: Post[] = []
    
    featuredSlugs.forEach(targetSlug => {
        // Add .md extension if not already present
        const filename = targetSlug.endsWith('.md') ? targetSlug : `${targetSlug}.md`
        const matchingPosts = allPosts.filter(post => 
            getFName(post.file) === filename
        )
        featuredPosts.push(...matchingPosts)
    })
    
    return featuredPosts
}

// Configuration
const cleanSiteUrl = getCleanSiteUrl(Astro.site)
const siteLocation = {
    protocol: 'https:', 
    host: cleanSiteUrl, 
}

const featuredPostSlugs = ['hello-world', 'nodebooks']

// Load and process blog posts
const blogPostItems = import.meta.glob('../../content/blog/posts/**/*.md', { eager: true })
const blogPostKeys = Object.keys(blogPostItems)
const allBlogPosts: Post[] = Object.values(blogPostItems) as Post[]

const featuredPosts = getFeaturedPosts(allBlogPosts, featuredPostSlugs)

// Helper function to clean and normalize text content
function cleanTextContent(text: string): string {
    let cleanText = text
    
    // Replace line breaks with spaces
    if (cleanText.includes('\n')) {
        cleanText = cleanText.split('\n').join(' ')
    }
    
    // Replace double spaces with single spaces
    if (cleanText.includes('  ')) {
        cleanText = cleanText.split('  ').join(' ')
    }
    
    return cleanText
}

// Helper function to create preview content with trimming
function createPreviewContent(text: string, maxLength: number = 50): string {
    let preview = text
    
    if (preview.length > maxLength) {
        preview = preview.slice(0, maxLength)
    }
    
    // Characters to trim from the end
    const trimChars = [' ', ',', ':', '(', '[', '{', '|', '~', '@', '*', '+', '=', '-', '^']
    
    while (trimChars.some(char => preview.endsWith(char))) {
        preview = preview.slice(0, -1)
    }
    
    return preview
}

// Helper function to generate screenshot image data
function generateScreenshotImage(postUrl: string, title: string, imageSize: number = 512) {
    const screenshotUrl = `https://webshot.adarshrkumar.dev/take?url=${encodeURIComponent(postUrl)}&viewport_width=${imageSize}&viewport_height=${imageSize}`
    
    return {
        src: screenshotUrl,
        alt: `Screenshot of the "${title}" post.`,
        placeholder: `${screenshotUrl}&image_quality=50`
    }
}

---
<SiteGridContent classItems="posts">
        {
            featuredPosts.map(post => {
                // Extract clean slug from file path
                const postSlug = getFName(post.file)
                
                // Generate post URL and screenshot image
                const postUrl = `${siteLocation.protocol}//${siteLocation.host}/post/${postSlug}?hideHeader=true`
                const screenshotImage = generateScreenshotImage(postUrl, post.frontmatter.title || 'Untitled Post')
                
                // Process text content for preview
                const rawTextContent = sanitizeMD(post.rawContent())
                const cleanedTextContent = cleanTextContent(rawTextContent)
                const previewContent = createPreviewContent(cleanedTextContent)
                
                // Check if we have content to display
                const hasContent = !!(post.frontmatter.title || cleanedTextContent)
                const hasTitle = !!post.frontmatter.title
                const hasPreview = !!previewContent
                
                return (
                    <a href={`/post/${postSlug}`} class="item">
                        <img 
                            class="item__img" 
                            src={screenshotImage.src} 
                            alt={screenshotImage.alt} 
                            style={`--placeholder: url('${screenshotImage.placeholder}')`} 
                        />
                        {hasContent && (
                            <div class="item__info">
                                {hasTitle && (
                                    <h3 class="item__title">{post.frontmatter.title}</h3>
                                )}
                                {hasPreview && (
                                    <p class="item__content">{previewContent}</p>
                                )}
                            </div>
                        )}
                    </a>
                )
            })
        }
</SiteGridContent>