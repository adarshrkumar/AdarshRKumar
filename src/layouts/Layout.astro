---
import '../styles/globals.scss'

import Header from '../components/header.astro'
import Sidebar from '../components/sidebar.astro'
import Script from '../utils/script.astro'
import sanitizeMD from '../lib/sanitizeMD'
import type { SiteConfig, PageType, LayoutProps } from '../lib/types'

// Site configuration
const siteConfig: SiteConfig = {
    name: 'Adarsh Kumar',
    logo: '/assets/logo.jpg',
    favicon: '/assets/favicon.png',
    placeholder: '/assets/placeholder.svg'
}

// Helper function to clean and normalize about content
function cleanAboutContent(content: string): string {
    let cleanedContent = content
        .replaceAll('{ age }', age.toString())
        .replaceAll('  ', ' ')
        .replaceAll(' \n', ' ')
        .replaceAll('\n', ' ')
    
    // Remove leading and trailing spaces
    while (cleanedContent.startsWith(' ')) {
        cleanedContent = cleanedContent.slice(1)
    }
    while (cleanedContent.endsWith(' ')) {
        cleanedContent = cleanedContent.slice(0, -1)
    }
    
    return cleanedContent
}

// Helper function to process page title based on page type
function processPageTitle(title: string, pageType: PageType): string {
    switch (pageType) {
        case 'post':
            return `${title} | Blog`
        case 'author':
            return `${title} | Author`
        default:
            return title
    }
}

// Helper function to build final page title
function buildFinalTitle(processedTitle: string, pageTitle: string): string {
    if (pageTitle === 'Home') {
        return siteConfig.name
    }
    return `${processedTitle} | ${siteConfig.name}`
}

// Helper function to clean CSS class string
function cleanCSSClass(classString: string): string {
    let cleaned = classString
    if (cleaned.startsWith(' ')) {
        cleaned = cleaned.substring(1)
    }
    if (cleaned.endsWith(' ')) {
        cleaned = cleaned.substring(0, cleaned.length - 1)
    }
    return cleaned
}

// Get component props
const { title, pTitle, classItems, inlineStyles, pageType, author }: LayoutProps = Astro.props

// Process props
const pageTitle = pTitle || title || 'Home'
const baseClassItems = classItems || ''
const finalClassItems = pageType ? `${baseClassItems} ${pageType}` : baseClassItems
const processedTitle = processPageTitle(title || '', pageType)
const finalTitle = buildFinalTitle(processedTitle, pageTitle)
const cssClassName = cleanCSSClass(`page-area main-content ${finalClassItems}`)

// Load and process content
import age from '../lib/getAge'

const aboutFile = await import('../../content/aboutContent.md')
const aboutContent = cleanAboutContent(sanitizeMD(aboutFile.rawContent()))

const keywordsData = await import('../../content/siteKeywords.json')
const keywordsArray = keywordsData.default.map(keyword => keyword.replaceAll('{ age }', age.toString()))
const keywords = keywordsArray.join(', ')
---

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content={aboutContent} />
        <meta name="keywords" content={keywords} />
        {author ? <meta name="author" content={author} /> : ''}
        <title>{title}</title>
        <!-- <base href={Astro.site} /> -->
        <link rel="icon" href="/assets/favicon.png" />
        <link rel="preload" as="image" href="/assets/placeholder.svg" />
        <script type='text/javascript' src='https://platform-api.sharethis.com/js/sharethis.js#property=625cc7f8cb9e7d001955b4a3&product=sop' async='async'></script>
        <Script name="settings" />
    </head>
    <body>
        <Header logo={siteConfig.logo} />
        <div class="wrapper">
            <main class="content" id="content">
                { pageType === 'home' ? '' : <h1 class="page-title">{pTitle || title}</h1> }
                <div class={cssClassName} style={inlineStyles}>
                    <slot />
                </div>
            </main>
            <!-- <Sidebar /> -->
        </div>
        <Script name="main" />
        <!-- <script src="/eruda.js" is:inline></script> -->
        <!--Start of Tawk.to Script-->
        <!-- <script type="text/javascript">
            var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
            (function(){
                var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
                s1.async=true;
                s1.src='https://embed.tawk.to/613695e4d6e7610a49b3f5bc/1feujj12b';
                s1.charset='UTF-8';
                s1.setAttribute('crossorigin','*');
                s0.parentNode.insertBefore(s1,s0);
            })();
        </script> -->
        <!--End of Tawk.to Script-->
    </body>
</html>
