---
import Layout from '../layouts/Layout.astro'
import SiteGridContent from '../components/siteGridContent.astro'
import '../styles/pages/photos.scss'
import type { PhotoItem } from '../lib/types'

// Helper function to extract clean site URL
function getCleanSiteUrl(siteUrl: string | URL | undefined): string {
    const defaultUrl = 'https://adarshrkumar.dev'
    let cleanUrl = siteUrl?.toString() || defaultUrl
    
    if (cleanUrl.includes('://')) {
        cleanUrl = cleanUrl.split('://')[1]
    }
    if (cleanUrl.endsWith('/')) {
        cleanUrl = cleanUrl.slice(0, -1)
    }
    
    return cleanUrl
}

// Helper function to extract filename from path
function extractFileName(filePath: string): string {
    let fileName = filePath
    
    // Extract filename from path
    if (fileName.includes('/')) {
        fileName = fileName.split('/').slice(-1)[0]
    }
    
    // Remove query parameters
    if (fileName.includes('?')) {
        fileName = fileName.split('?')[0]
    }
    
    // Handle complex extensions (e.g., file.name.jpg -> file.jpg)
    if (fileName.includes('.')) {
        const nameParts = fileName.split('.')
        if (nameParts.length > 2) {
            fileName = `${nameParts.slice(0, -2).join('.')}.${nameParts.slice(-1).join('.')}`
        }
    }
    
    return fileName
}

// Helper function to normalize imported data
function normalizeImportedData<T>(items: any[]): T[] {
    return items.map(item => item.default || item) as T[]
}

// Helper function to match photos with their metadata
function enrichPhotosWithMetadata(photos: any[], metadataList: any[]): any[] {
    return photos.map(photo => {
        if (!photo.src) return photo
        
        const photoFileName = extractFileName(photo.src)
        const matchingMetadata = metadataList.find(metadata => 
            metadata.fullname === photoFileName
        )
        
        return {
            ...photo,
            fullname: photoFileName,
            data: matchingMetadata
        }
    })
}

// Configuration and data loading
const cleanSiteUrl = getCleanSiteUrl(Astro.site)

// Load photos and metadata
const photoModules = import.meta.glob('../../content/allPhotos/*/*', { eager: true })
const metadataModules = import.meta.glob('../../content/allPhotos/*/info.js', { eager: true })

// Normalize imported data (handle .default exports)
const normalizedPhotos: PhotoItem[] = normalizeImportedData(Object.values(photoModules))
const normalizedMetadata: any[] = normalizeImportedData(Object.values(metadataModules))

// Enrich photos with their metadata
const photosWithMetadata: PhotoItem[] = enrichPhotosWithMetadata(normalizedPhotos, normalizedMetadata)

// Re-export getFName for compatibility
const getFName = extractFileName

---
<Layout title="Photos">
    <SiteGridContent classItems="photos" options={{min: '24rem'}} mode="lite">
        {
            photosWithMetadata.map(photo => {
                // Skip photos without source
                if (!photo.src) {
                    return ''
                }
                
                const photoData = photo.data
                const photoFileName = getFName(photo.src || '')
                
                // Generate placeholder image URL
                const placeholderUrl = `https://imgs.adarshrkumar.dev/Photos/Places/${photoFileName}?w=25%25`
                
                // Check if we have metadata to display
                const hasMetadata = !!(photoData?.title || photoData?.info)
                const hasTitle = !!photoData?.title
                const hasLocation = !!photoData?.location
                
                return (
                    <div class="item">
                        <img 
                            class="item__img" 
                            src={photo.src || ''} 
                            alt={photo.alt || ''} 
                            style={`--placeholder: url('${placeholderUrl}');`} 
                            loading="lazy" 
                            decoding="async" 
                        />
                        {hasMetadata && (
                            <div class="item__info">
                                {hasTitle && (
                                    <h3 class="item__title">{photoData.title}</h3>
                                )}
                                {hasLocation && (
                                    <span class="item__content">üìç {photoData.location}</span>
                                )}
                            </div>
                        )}
                    </div>
                )
            })
        }
    </SiteGridContent>
</Layout>