---
// Imports
import '../styles/pages/[about, contact].scss'

import Layout from '../layouts/Layout.astro'
import Input from '../defaultComponents/Input.astro'
import TextArea from '../defaultComponents/TextArea.astro'
import type { FormConfig, FormField } from '../lib/types'
import type { HTMLAttributes } from 'astro/types'
import { nanoid } from 'nanoid'

// Extract input type from HTMLAttributes
type HTMLInputTypeAttribute = HTMLAttributes<'input'>['type']

// Configuration
// Form configuration
const formConfig: FormConfig = {
    action: "https://docs.google.com/forms/d/e/1FAIpQLSfleYNKUZ6MfijVAEwcIT1Gga4aOhrElpEdayw3_z_vLrs1GA/formResponse",
    method: "POST",
    className: "contact"
}


// Form field configurations
const formFields: Record<string, FormField> = {
    name: {
        type: "text" as const,
        name: "entry.183817893",
        id: "name",
        placeholder: "What's your name?",
        required: "TRUE",
        align: "left",
        label: "Name: "
    },
    email: {
        type: "email" as const,
        name: "entry.1021394857",
        id: "email",
        placeholder: "you@email.tld",
        required: "TRUE",
        align: "left",
        label: "Email: "
    },
    message: {
        type: "textarea" as const,
        label: "Message:",
        name: "entry.1554105426",
        id: "message",
        placeholder: "Type here...",
        required: "TRUE"
    },
    submit: {
        type: "submit" as const,
        name: "submit",
        id: "submit",
        value: "Send",
        className: "contact-button",
        align: "right",
        style: "cursor: pointer; margin-left: auto;"
    }
}

const randomId = nanoid()

---

<!-- Contact Page -->
<Layout title="Contact">
    <form action={formConfig.action} method={formConfig.method} class={formConfig.className}>
        <Input
            type={formFields.name.type as HTMLInputTypeAttribute} 
            name={formFields.name.name} 
            id={formFields.name.id} 
            placeholder={formFields.name.placeholder} 
            required={formFields.name.required} 
            align={formFields.name.align as "left" | "right" | "center" | undefined}
        >
            {formFields.name.label}
        </Input>
        
        <!-- <input hidden type="text" name="FromFull" id="from" /> -->
        
        <Input 
            type={formFields.email.type as HTMLInputTypeAttribute} 
            name={formFields.email.name} 
            id={formFields.email.id} 
            placeholder={formFields.email.placeholder} 
            required={formFields.email.required} 
            align={formFields.email.align as "left" | "right" | "center" | undefined}
        >
            {formFields.email.label}
        </Input>
        
        <TextArea 
            label={formFields.message.label}
            autosize={true}
            rows="1"
            name={formFields.message.name}
            id={formFields.message.id}
            placeholder={formFields.message.placeholder}
            required={formFields.message.required}
        />
        
        <Input 
            type="hidden" 
            name="entry.1290678673" 
            id="email-subject" 
            value="Contact Form Submission" 
        />
        
        <Input 
            type={formFields.submit.type as HTMLInputTypeAttribute} 
            value={formFields.submit.value} 
            class={formFields.submit.className} 
            align={formFields.submit.align as "left" | "right" | "center" | undefined} 
            style={formFields.submit.style}
        />
    </form>
</Layout>
<script define:vars={{ randomId }}>
    const form = document.querySelector('.contact')

    form.addEventListener('submit', handleFormSubmission)

    async function handleFormSubmission(e) {
        e.preventDefault()

        // Get all form values with proper handling for multiple checkboxes/radios
        const formData = new FormData(form)
        const formValues = {}

        for (let [key, value] of formData.entries()) {
            if (formValues[key]) {
                // If key already exists, convert to array
                if (Array.isArray(formValues[key])) {
                    formValues[key].push(value)
                } else {
                    formValues[key] = [formValues[key], value]
                }
            } else {
                formValues[key] = value
            }
        }

        // Handle checkboxes that weren't checked (they don't appear in FormData)
        const checkboxes = form.querySelectorAll('input[type="checkbox"]')
        checkboxes.forEach((checkbox) => {
            const input = checkbox
            if (input.name && !formData.has(input.name)) {
                formValues[input.name] = false
            }
        })

        // Handle radio buttons that weren't selected
        const radioGroups = {}
        const radios = form.querySelectorAll('input[type="radio"]')
        radios.forEach((radio) => {
            const input = radio
            if (input.name) {
                radioGroups[input.name] = true
            }
        })
        
        Object.keys(radioGroups).forEach(groupName => {
            if (!formData.has(groupName)) {
                formValues[groupName] = null
            }
        })

        // Add current date to form data
        const now = new Date()
        const year = now.getFullYear()
        const month = String(now.getMonth() + 1).padStart(2, '0')
        const day = String(now.getDate()).padStart(2, '0')
        const hours = String(now.getHours()).padStart(2, '0')
        const minutes = String(now.getMinutes()).padStart(2, '0')
        const dateString = `${year}-${month}-${day}+${hours}:${minutes}`
        
        formData.append('entry.1741855386', dateString)
        formData.append('entry.352902831', randomId)
        
        // Submit form data to the endpoint using hidden iframe
        console.log('Submitting form to:', form.action)
        console.log('Form data:', Object.fromEntries(formData))
        
        // Create hidden iframe for submission
        const iframe = document.createElement('iframe')
        iframe.style.display = 'none'
        iframe.name = 'hidden_iframe'
        document.body.appendChild(iframe)
        
        // Set form target to iframe
        form.target = 'hidden_iframe'
        
        // Handle iframe load event
        iframe.onload = () => {
            console.log('Form submitted successfully')
            form.reset()
            document.body.removeChild(iframe)
        }
        
        // Submit the form
        form.submit()
    }
</script>